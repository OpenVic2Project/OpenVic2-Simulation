#!/usr/bin/env python

Import("env")

def build_openvic_dataloader(env):
    ovdl_env = SConscript("openvic-dataloader/SConstruct")
    env.Append(LIBPATH=ovdl_env.openvic_dataloader["LIBPATH"])
    env.Prepend(LIBS=ovdl_env.openvic_dataloader["LIBS"])
    env.Append(CPPPATH=ovdl_env.openvic_dataloader["INCPATH"])
    env.openvic_dataloader = ovdl_env.openvic_dataloader
    env.exposed_includes += env.openvic_dataloader["INCPATH"]

def build_lexy_vdf(env):
    lvdf_env = SConscript("lexy-vdf/SConstruct")
    env.Append(LIBPATH=lvdf_env.lexy_vdf["LIBPATH"])
    env.Prepend(LIBS=lvdf_env.lexy_vdf["LIBS"])
    env.Append(CPPPATH=lvdf_env.lexy_vdf["INCPATH"])
    env.lexy_vdf = lvdf_env.lexy_vdf

def build_ordered_map(env):
    include_path = "ordered-map/include"
    env.ordered_map = {}
    env.ordered_map["INCPATH"] = [env.Dir(include_path)]
    env.Append(CPPPATH=env.ordered_map["INCPATH"])
    env.exposed_includes += env.ordered_map["INCPATH"]

def build_colony(env):
    include_path = "plf_colony"
    env.colony = {}
    env.colony["INCPATH"] = [env.Dir(include_path)]
    env.Append(CPPPATH=env.colony["INCPATH"])
    env.exposed_includes += env.colony["INCPATH"]

def link_tbb(env):
    import sys
    if not env.get("is_msvc", False) and not env.get("use_mingw", False) and sys.platform != "darwin":
        env.ParseConfig("pkg-config tbb --cflags --libs")

build_openvic_dataloader(env)
build_lexy_vdf(env)
build_ordered_map(env)
build_colony(env)
link_tbb(env)